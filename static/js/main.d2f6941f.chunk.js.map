{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RenderResult","props","className","city","tempC","tempF","RenderGif","src","alt","App","getApi","a","setState","errMsg","loading","state","fetch","mode","response","json","tempData","cod","data","convertToCelcius","convertToFahrenheit","getGifApi","console","log","condition","weather","main","then","images","original","url","catch","error","handleSubmit","e","preventDefault","changeHandler","target","value","Math","round","temp","cond","onSubmit","this","type","placeholder","onChange","name","style","display","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d2f6941f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { SemipolarLoading } from 'react-loadingg';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { \n      data: {},\n      city: '',\n      tempC: '',\n      tempF: '',\n      errMsg: '',\n      cond: '',\n      src: '',\n      loading: false\n    };\n  }\n  getApi = async() => {\n    try {\n      this.setState({\n        errMsg: '',\n        src: '',\n        loading: true \n      }); \n      const city = this.state.city;\n      const apiKey = '05a4c77487211944ceff0c266384ab5b';\n      const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q='+city+'&appid='+apiKey, {mode: 'cors'});\n      const tempData = await response.json();\n      if (tempData.cod === 200){\n        this.setState({data: tempData});\n        this.convertToCelcius();  \n        this.convertToFahrenheit();\n        this.getGifApi();\n      } else if (tempData.cod === '400') {\n        this.setState({\n          errMsg: \"Server is not responding\"\n        })\n      } else if (tempData.cod === '404') {\n        this.setState({\n          errMsg: \"Enter a Valid City\"\n        })\n      }\n    } \n    catch(error) {     \n        console.log(error)\n        console.log(this.state.errMsg)    \n    }    \n  }\n\n  getGifApi = async() => {\n    const apiKeyGif = 'U6J6myaHj9i1c2TPzRYhM2DTRpmIrftw';\n    const condition = this.state.data.weather[0].main;\n    fetch('https://api.giphy.com/v1/gifs/translate?api_key='+apiKeyGif+'&s='+condition, {mode: 'cors'})\n    .then((response) => {\n      return (response.json());\n    })\n    .then((response) => {\n      this.setState({\n        src: response.data.images.original.url,\n        loading: false\n      })\n    })\n    .catch((error) => {\n      console.log(error)\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.getApi();\n  }\n\n\n  changeHandler = (e) => {\n    this.setState({city: e.target.value})\n  }\n\n\n  convertToCelcius = () => {\n    this.setState({tempC: Math.round((this.state.data.main.temp - 273.15)*100)/100+' °C' })\n  }\n\n\n  convertToFahrenheit = () => {\n    this.setState({tempF: Math.round((this.state.data.main.temp*9/5-459.67)*100)/100+' °F'})\n  }\n\n\n  render() {\n    const showLoading = {\n      display: 'block'\n    }\n    const dontShowLoading = {\n      display: 'none'\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">     \n          <form \n            onSubmit={this.handleSubmit}\n            className='form'>\n            <label className=\"inp\">\n              <input \n                type=\"text\" \n                placeholder='city'\n                onChange={this.changeHandler}\n              />\n            </label>\n            <button className='fa fa-search' type=\"submit\"></button>\n          </form>\n          {this.state.errMsg}\n          <div className=\"Result\">\n            <RenderResult \n              city={this.state.data.name}\n              tempC={this.state.tempC}\n              tempF={this.state.tempF}/>\n          </div>\n        </header>\n        <SemipolarLoading className='loading' style={(this.state.loading) ? showLoading : dontShowLoading}/>\n        <RenderGif src={this.state.src} />\n      </div>\n    );\n  } \n}\n\n\nfunction RenderResult(props) {\n  return(\n    <div>\n      <div className=\"Result-City\">\n        {props.city}\n      </div>\n      \n      <div>\n        {props.tempC}\n      </div>\n      <div>\n        {props.tempF}\n      </div>\n    </div>\n  )\n}\n\nfunction RenderGif(props) {\n  return(\n    <div>\n      <img className='img' src={props.src} alt=''/>\n    </div>\n   \n  )\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}